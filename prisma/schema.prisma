// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid()) @db.Uuid
  username      String         @unique
  password      String
  name          String
  lastName      String
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  roles         UserRole[]
  refreshTokens RefreshToken[]
  pushTokens    PushToken[]
  Employee      Employee[]
  FuelRefill    FuelRefill[]
  FuelTankReset FuelTankReset[]
  FuelConsumption FuelConsumption[]
  @@map("users")
}

model Role {
  id        Int        @id @default(autoincrement())
  name      String     @unique @db.VarChar(50)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  users     UserRole[]

  @@map("roles")
}

model UserRole {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id") @db.Uuid
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId    Int      @map("role_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, roleId])
  @@map("user_roles")
}

model RefreshToken {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String    @map("user_id") @db.Uuid
  token      String
  expiresAt  DateTime  @map("expires_at")
  revoked    Boolean   @default(false)
  revokedAt  DateTime? @map("revoked_at")
  deviceInfo Json?     @map("device_info")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  @@map("refresh_tokens")
}

model PushToken {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id") @db.Uuid
  token     String
  platform  String
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("push_tokens")
}

model Employee {
  id   String @id @default(uuid()) @db.Uuid
  user User?  @relation(fields: [userId], references: [id], onDelete: SetNull)

  userId                String?           @map("user_id") @db.Uuid
  employeeCode          String            @map("employee_code") @db.VarChar(50) @unique
  name                  String            @db.VarChar(100)
  lastName              String            @db.VarChar(100)
  position              String            @db.VarChar(100)
  phoneNumber           String?           @map("phone_number") @db.VarChar(20) @unique
  cedula                String?           @map("cedula") @db.VarChar(15) @unique
  licenseExpirationDate DateTime?         @map("license_expiration_date")
  isActive              Boolean           @default(true)
  createdAt             DateTime          @default(now()) @map("created_at")
  updatedAt             DateTime          @updatedAt @map("updated_at")

  FuelConsumption       FuelConsumption[]

  @@map("employees")
}

model Vehicle {
  id           String   @id @default(uuid()) @db.Uuid
  licensePlate String   @unique @db.VarChar(20)
  chasis       String   @unique @db.VarChar(50)
  brand        String   @db.VarChar(50)
  model        String   @db.VarChar(50)
  year         Int
  currentTag   String   @unique @map("current_tag") @db.VarChar(50)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  tagHistory      VehicleTagHistory[]
  FuelConsumption FuelConsumption[]

  @@map("vehicles")
}

model VehicleTagHistory {
  id        Int      @id @default(autoincrement())
  vehicleId String   @map("vehicle_id") @db.Uuid
  tag       String   @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")

  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@map("vehicles_tag_history")
}

model FuelTank {
  id           Int      @id @default(autoincrement())
  capacity     Float
  currentLevel Float    @map("current_level")
  minLevel     Float    @map("min_level")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("fuel_tank")
}

model FuelConsumption {
  id         Int      @id @default(autoincrement())
  vehicleId  String   @map("vehicle_id") @db.Uuid
  driverId   String?   @map("driver_id") @db.Uuid
  tankRefillId Int?    @map("tank_refill_id")
  gallons    Float
  mileage    Float?
  notes      String?
  userId     String   @map("user_id") @db.Uuid
  consumedAt DateTime @default(now()) @map("consumed_at")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  vehicle    Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  driver     Employee? @relation(fields: [driverId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tankRefill FuelRefill? @relation(fields: [tankRefillId], references: [id], onDelete: SetNull)
  @@map("fuel_consumption")
}

model FuelRefill {
  id Int @id @default(autoincrement())
  gallons Float
  pricePerGallon Float @map("price_per_gallon")
  previousLevel Float @map("previous_level")
  newLevel Float @map("new_level")
  userId String @map("user_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Consumptions FuelConsumption[]

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("fuel_refill")
}

model FuelTankReset {
  id Int @id @default(autoincrement())
  previousLevel Float @map("previous_level")
  userId String @map("user_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("fuel_tank_resets")
}